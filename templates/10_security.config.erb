# HTCondor configuration: security

use SECURITY : Strong

<% if @default_domain_name -%>
DEFAULT_DOMAIN_NAME = <%= @default_domain_name %>
<% end -%>
UID_DOMAIN = <%= @uid_domain %>
<% if @filesystem_domain -%>
FILESYSTEM_DOMAIN = <%= @filesystem_domain %>
<% end -%>

COLLECTOR_HOST = <%= @managers.flatten.join(', ') %>

<% if @cluster_has_multiple_domains == true then -%>
TRUST_UID_DOMAIN = True
<% end -%>

# Machines & users
CMS = central-manager@$(UID_DOMAIN)/*.$(DEFAULT_DOMAIN_NAME)
CES = computing-element@$(UID_DOMAIN)/*.$(DEFAULT_DOMAIN_NAME)
CES_MATCH_SESSION = <%= @computing_elements.collect { |x| "submit-side@matchsession/" + x }.join(', ') %>
WNS = worker-node@$(UID_DOMAIN)/*.$(DEFAULT_DOMAIN_NAME)
THIS_HOST = <%= @is_manager ? "central-manager" : @is_ce ? "computing-element" : "worker-node" -%>@$(UID_DOMAIN)/$(FULL_HOSTNAME)
CONDOR_HOSTS = $(CMS),$(CES),$(WNS)
USERS = *@$(UID_DOMAIN)/*.$(DEFAULT_DOMAIN_NAME)

# Clear out any old-style HOSTALLOW settings:
HOSTALLOW_READ =
HOSTALLOW_WRITE =
HOSTALLOW_DAEMON =
HOSTALLOW_NEGOTIATOR =
HOSTALLOW_ADMINISTRATOR =
HOSTALLOW_OWNER =

# Administrator is the root user on the CMs
ALLOW_ADMINISTRATOR = $(CMS)

# Owner is the root of the machine
ALLOW_OWNER = $(THIS_HOST)

# CERN users from CERN machines can read everything
ALLOW_READ = $(USERS)

# CERN, and CE machine users can submit jobs
ALLOW_WRITE =
SCHEDD.ALLOW_WRITE = $(USERS),*@fsauth/$(FULL_HOSTNAME)

# All kinds of nodes can advertise master
COLLECTOR.ALLOW_ADVERTISE_MASTER = $(CONDOR_HOSTS)

# CEs can advertise schedds
COLLECTOR.ALLOW_ADVERTISE_SCHEDD = $(CES)

# Worker nodes can advertise startds
COLLECTOR.ALLOW_ADVERTISE_STARTD = $(WNS)

# Schedds accept negotiation requests only from the CMs
# NOTE: SCHEDD.ALLOW_NEGOTIATOR should be the same, but doesn't work (Condor bug)
ALLOW_NEGOTIATOR_SCHEDD = $(CMS)

# No runtime configuration allowed
ALLOW_CONFIG =

# Only the service user (by host-based GSI auth) can send daemon messages
ALLOW_DAEMON = $(CONDOR_HOSTS),$(CES_MATCH_SESSION)

# CERN users from CERN nodes can act as clients
# NOTE: Nasty workaround for a bug in condor, should be reviewed!!!
ALLOW_CLIENT = *
#@$(UID_DOMAIN)/*.$(DEFAULT_DOMAIN_NAME)

QUEUE_SUPER_USERS = central-manager,computing-element

SEC_DEFAULT_AUTHENTICATION = REQUIRED
SEC_CLIENT_AUTHENTICATION = REQUIRED

SEC_DEFAULT_INTEGRITY = REQUIRED

<% if @use_kerberos_security then -%>

# Authentication
SEC_DEFAULT_AUTHENTICATION_METHODS = GSI,KERBEROS,FS
SEC_CLIENT_AUTHENTICATION_METHODS = GSI,KERBEROS,FS

SEC_ENABLE_MATCH_PASSWORD_AUTHENTICATION = True
CERTIFICATE_MAPFILE = /etc/condor/certificate_mapfile

# Encryption
SEC_DEFAULT_ENCRYPTION = REQUIRED
SEC_DEFAULT_CRYPTO_METHODS = BLOWFISH

<% else -%>
# Authentication
SEC_PASSWORD_FILE = /etc/condor/pool_password
SEC_READ_AUTHENTICATION = OPTIONAL
SEC_DEFAULT_AUTHENTICATION_METHODS = PASSWORD,FS
SCHEDD.SEC_WRITE_AUTHENTICATION_METHODS = FS,PASSWORD
SCHEDD.SEC_DAEMON_AUTHENTICATION_METHODS = FS,PASSWORD
SEC_CLIENT_AUTHENTICATION_METHODS = FS,PASSWORD,CLAIMTOBE
SEC_READ_AUTHENTICATION_METHODS = FS,PASSWORD,CLAIMTOBE

# Integrity
SEC_DAEMON_INTEGRITY = REQUIRED
SEC_NEGOTIATOR_INTEGRITY = REQUIRED

# Encryption
#SEC_DEFAULT_ENCRYPTION = OPTIONAL
#SEC_READ_ENCRYPTION = OPTIONAL
#SEC_CLIENT_ENCRYPTION = OPTIONAL
<% end -%>
