# HTCondor configuration: security

use SECURITY : Strong

<% if @default_domain_name -%>
DEFAULT_DOMAIN_NAME = <%= @default_domain_name %>
<% end -%>
UID_DOMAIN = <%= @uid_domain %>
<% if @filesystem_domain -%>
FILESYSTEM_DOMAIN = <%= @filesystem_domain %>
<% end -%>

COLLECTOR_HOST = <%= @managers.flatten.join(', ') %>

<% if @cluster_has_multiple_domains == true then -%>
TRUST_UID_DOMAIN = True
<% end -%>

# Machines & users
CMS = <%= @managers.flatten.join(', ') %>
CES = <%= @computing_elements.flatten.join(', ') %>
WNS = <%= @worker_nodes.flatten.join(', ') %>

USERS = *@$(UID_DOMAIN)/*.$(DEFAULT_DOMAIN_NAME)

# Clear out any old-style HOSTALLOW settings:
HOSTALLOW_READ =
HOSTALLOW_WRITE =
HOSTALLOW_DAEMON =
HOSTALLOW_NEGOTIATOR =
HOSTALLOW_ADMINISTRATOR =
HOSTALLOW_OWNER =

# Administrator is the root user on the CMs
ALLOW_ADMINISTRATOR = <%= @managers.collect { |x| "condor-service@$(UID_DOMAIN)/" + x }.join(', ') %>

# Owner is the root of the machien
ALLOW_OWNER = condor-service@$(UID_DOMAIN)/$(FULL_HOSTNAME)

# CERN users from CERN machines can read everything
ALLOW_READ = *@$(UID_DOMAIN)/*.$(DEFAULT_DOMAIN_NAME)

# CERN users can submit jobs
ALLOW_WRITE =
SCHEDD.ALLOW_WRITE = *@$(UID_DOMAIN)/*.$(DEFAULT_DOMAIN_NAME),*@fsauth/$(FULL_HOSTNAME)

# CMs can be masters
COLLECTOR.ALLOW_ADVERTISE_MASTER = <%= (@managers + @computing_elements + @worker_nodes).collect { |x| "condor-service@$(UID_DOMAIN)/" + x }.join(', ') %>

# CEs can be schedds
COLLECTOR.ALLOW_ADVERTISE_SCHEDD = <%= @computing_elements.collect { |x| "condor-service@$(UID_DOMAIN)/" + x }.join(', ') %>

# Should be reviewed, now everybody can join the wn pool which is bad
COLLECTOR.ALLOW_ADVERTISE_STARTD = <%= @worker_nodes.collect { |x| "condor-service@$(UID_DOMAIN)/" + x }.join(', ') %>

# Schedds accept negotiation requests only from the CMs
ALLOW_NEGOTIATOR_SCHEDD = <%= @managers.collect { |x| "condor-service@$(UID_DOMAIN)/" + x }.join(', ') %>

# No runtime configuration allowed
ALLOW_CONFIG =

# Only the service user (by host-based GSI auth) can send daemon messages
ALLOW_DAEMON = <%= (@managers + @computing_elements + @worker_nodes).collect { |x| "condor-service@$(UID_DOMAIN)/" + x }.join(', ') %>, <%= @worker_nodes.collect { |x| "submit-side@matchsession/" + x }.join(', ') %>

# CERN users from CERN nodes can act as clients
# Workaround, should be reviewed!!!
ALLOW_CLIENT = *
#@$(UID_DOMAIN)/*.$(DEFAULT_DOMAIN_NAME)

QUEUE_SUPER_USERS = condor-service

##ALLOW_READ = */*.$(UID_DOMAIN)
##ALLOW_WRITE = $(CMS), $(CES), $(WNS)
#debugging
#ALLOW_READ  = $(USERS)/*.$(UID_DOMAIN), tomcat/*.$(UID_DOMAIN), ldap/*.$(UID_DOMAIN)
#ALLOW_DAEMON = condor_pool@$(UID_DOMAIN), condor@$(UID_DOMAIN), $(FULL_HOSTNAME)
#ALLOW_ADMINISTRATOR = root@$(UID_DOMAIN)/$(IP_ADDRESS), $(CMS)
#ALLOW_CONFIG = root@$(FULL_HOSTNAME)

#NEGOTIATOR.ALLOW_WRITE = $(CES), $(CMS)

#if the CE has a private NIC, it needs to be included here as well
##COLLECTOR.ALLOW_ADVERTISE_MASTER = $(CES), $(CMS), $(WNS)
##COLLECTOR.ALLOW_ADVERTISE_SCHEDD = $(CES)
##COLLECTOR.ALLOW_ADVERTISE_STARTD = $(WNS)

##SCHEDD.ALLOW_WRITE = $(USERS), $(CES)

#SHADOW.ALLOW_WRITE = $(WNS), $(CES)

##ALLOW_DAEMON = condor@$(UID_DOMAIN)/*.$(UID_DOMAIN)
##ALLOW_CONFIG = root@$(FULL_HOSTNAME)

# Don't allow nobody to run jobs
##SCHEDD.DENY_WRITE = nobody@$(UID_DOMAIN)

<% if @use_kerberos_security then -%>

# Authentication
SEC_DEFAULT_AUTHENTICATION = REQUIRED
SEC_CLIENT_AUTHENTICATION = REQUIRED
SEC_DEFAULT_AUTHENTICATION_METHODS = GSI,KERBEROS,FS
SEC_CLIENT_AUTHENTICATION_METHODS = GSI,KERBEROS,FS

SEC_ENABLE_MATCH_PASSWORD_AUTHENTICATION = True
CERTIFICATE_MAPFILE = /etc/condor/certificate_mapfile

# Integrity
SEC_DEFAULT_INTEGRITY  = REQUIRED

# Encryption
SEC_DEFAULT_ENCRYPTION = REQUIRED
SEC_DEFAULT_CRYPTO_METHODS = BLOWFISH

<% else -%>
# Authentication
SEC_PASSWORD_FILE = /etc/condor/pool_password
SEC_DEFAULT_AUTHENTICATION = REQUIRED
SEC_READ_AUTHENTICATION = OPTIONAL
SEC_CLIENT_AUTHENTICATION = REQUIRED
SEC_DEFAULT_AUTHENTICATION_METHODS = PASSWORD,FS
SCHEDD.SEC_WRITE_AUTHENTICATION_METHODS = FS,PASSWORD
SCHEDD.SEC_DAEMON_AUTHENTICATION_METHODS = FS,PASSWORD
SEC_CLIENT_AUTHENTICATION_METHODS = FS,PASSWORD,CLAIMTOBE
SEC_READ_AUTHENTICATION_METHODS = FS,PASSWORD,CLAIMTOBE

# Integrity
SEC_DEFAULT_INTEGRITY  = REQUIRED
SEC_DAEMON_INTEGRITY = REQUIRED
SEC_NEGOTIATOR_INTEGRITY = REQUIRED

# Encryption
#SEC_DEFAULT_ENCRYPTION = OPTIONAL
#SEC_READ_ENCRYPTION = OPTIONAL
#SEC_CLIENT_ENCRYPTION = OPTIONAL
<% end -%>
